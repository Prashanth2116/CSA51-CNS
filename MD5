#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>

#define LEFT_ROTATE(x, c) (((x) << (c)) | ((x) >> (32 - (c))))

// MD5 Constants
#define MD5_BLOCK_SIZE 64
#define MD5_DIGEST_SIZE 16

// MD5 Functions
#define F(x, y, z) (((x) & (y)) | (~(x) & (z)))
#define G(x, y, z) (((x) & (z)) | ((y) & ~(z)))
#define H(x, y, z) ((x) ^ (y) ^ (z))
#define I(x, y, z) ((y) ^ ((x) | ~(z)))

// MD5 Round Shifts
static const uint32_t shift_amounts[] = {7, 12, 17, 22, 5, 9, 14, 20, 4, 11, 16, 23, 6, 10, 15, 21};

// MD5 Constants Table
static const uint32_t k[] = {
    0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee,
    // ... (remaining constants)
};

// MD5 Context
typedef struct {
    uint32_t state[4];
    uint32_t count[2];
    uint8_t buffer[MD5_BLOCK_SIZE];
} MD5Context;

void md5_init(MD5Context *context);
void md5_update(MD5Context *context, const uint8_t *data, size_t len);
void md5_final(MD5Context *context, uint8_t result[MD5_DIGEST_SIZE]);

int main() {
    const char *msg = "The quick brown fox jumps over the lazy dog";
    MD5Context context;
    uint8_t md5_result[MD5_DIGEST_SIZE];

    md5_init(&context);
    md5_update(&context, (const uint8_t *)msg, strlen(msg));
    md5_final(&context, md5_result);

    printf("Input String: %s\n", msg);
    printf("MD5 Hash: ");
    for (int i = 0; i < MD5_DIGEST_SIZE; i++) {
        printf("%02x", md5_result[i]);
    }
    printf("\n");

    return 0;
}

void md5_init(MD5Context *context) {
    context->state[0] = 0x67452301;
    context->state[1] = 0xefcdab89;
    context->state[2] = 0x98badcfe;
    context->state[3] = 0x10325476;

    context->count[0] = 0;
    context->count[1] = 0;
}

void md5_transform(MD5Context *context, const uint8_t block[MD5_BLOCK_SIZE]) {
    // Implementation of the MD5 transformation
    // This function should update the context state based on the input block
}

void md5_update(MD5Context *context, const uint8_t *data, size_t len) {
    // Implementation of md5_update function
    size_t index = (size_t)((context->count[0] >> 3) % MD5_BLOCK_SIZE);
    context->count[0] += len << 3;
    if (context->count[0] < len << 3)
        context->count[1]++;
    context->count[1] += len >> 29;

    size_t part_len = MD5_BLOCK_SIZE - index;

    if (len >= part_len) {
        memcpy(&context->buffer[index], data, part_len);
        md5_transform(context, context->buffer);

        for (size_t i = part_len; i + MD5_BLOCK_SIZE - 1 < len; i += MD5_BLOCK_SIZE) {
            md5_transform(context, &data[i]);
        }

        index = 0;
    } else {
        size_t i = 0;
    }

    memcpy(&context->buffer[index], &data[len - part_len], part_len);
}

void md5_final(MD5Context *context, uint8_t result[MD5_DIGEST_SIZE]) {
    // Implementation of md5_final function
    uint8_t bits[8];
    uint32_t index = (uint32_t)((context->count[0] >> 3) % MD5_BLOCK_SIZE);

    bits[0] = (uint8_t)context->count[0];
    bits[1] = (uint8_t)(context->count[0] >> 8);
    bits[2] = (uint8_t)(context->count[0] >> 16);
    bits[3] = (uint8_t)(context->count[0] >> 24);
    bits[4] = (uint8_t)context->count[1];
    bits[5] = (uint8_t)(context->count[1] >> 8);
    bits[6] = (uint8_t)(context->count[1] >> 16);
    bits[7] = (uint8_t)(context->count[1] >> 24);

    md5_update(context, (uint8_t *)"\x80", 1);

    if (index > 56) {
        md5_update(context, (uint8_t *)"\x00\x00\x00\x00\x00\x00\x00\x00", index - 56);
    } else {
        md5_update(context, (uint8_t *)"\x00\x00\x00\x00\x00\x00\x00\x00", 56 - index);
    }

    md5_update(context, bits, 8);

    memcpy(result, context->state, MD5_DIGEST_SIZE);
}
